{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NHTQT15TZd_ahbUOXHA5uBAl1A2XGJmk","timestamp":1725537960723}],"authorship_tag":"ABX9TyOZRYQwcJHok+km32U9Ksx1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"YcdDWC7dAdCu"},"outputs":[],"source":["import os\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","\n","def load_data(file_path):\n","    \"\"\"\n","    Функция для загрузки данных.\n","\n","    :param file_path: Путь к CSV файлу с данными.\n","    :return: DataFrame с загруженными данными.\n","    \"\"\"\n","    data = pd.read_csv(file_path)\n","    return data\n","\n","def preprocess_data(df):\n","    \"\"\"\n","    Функция для обработки данных: заполнение пропусков, кодирование категориальных данных и нормализация.\n","\n","    :param df: Исходный DataFrame с данными.\n","    :return: Обработанный DataFrame.\n","    \"\"\"\n","    # 1. Заполнение пропущенных значений (если они есть)\n","    df.fillna(0, inplace=True)\n","\n","    # 2. Преобразование категориальных данных (например, 'Score_class' и 'Score_point')\n","    label_encoder = LabelEncoder()\n","\n","    # Если 'Score_class' и 'Score_point' - категориальные признаки, их нужно закодировать\n","    if 'Score_class' in df.columns:\n","        df['Score_class'] = label_encoder.fit_transform(df['Score_class'])\n","\n","    if 'Score_point' in df.columns:\n","        df['Score_point'] = df['Score_point'].replace({'-': 0})  # Если есть специфическая замена\n","        df['Score_point'] = df['Score_point'].astype(int)\n","\n","    # 3. Масштабирование числовых признаков\n","    scaler = StandardScaler()\n","\n","    numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns\n","    df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n","\n","    return df\n","\n","# ЕСЛИ ДАННЫЕ УЖЕ НЕ РАЗДЕЛЕНЫ:\n","def split_data(df):\n","    \"\"\"\n","    Разделение данных на тренировочную и тестовую выборки.\n","\n","    :param df: DataFrame с обработанными данными.\n","    :return: X_train, X_test, y_train, y_test.\n","    \"\"\"\n","    # Предположим, что 'label' является целевой переменной\n","    X = df.drop('label', axis=1)\n","    y = df['label']\n","\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    return X_train, X_test, y_train, y_test\n","\n","def save_data(df, folder_path, file_name):\n","    \"\"\"\n","    Функция для сохранения DataFrame в CSV файл.\n","\n","    :param df: DataFrame для сохранения.\n","    :param folder_path: Папка, в которую нужно сохранить файл.\n","    :param file_name: Имя CSV файла для сохранения.\n","    \"\"\"\n","    # Создаем папку, если её нет\n","    os.makedirs(folder_path, exist_ok=True)\n","\n","    # Полный путь к файлу\n","    file_path = os.path.join(folder_path, file_name)\n","\n","    # Сохранение в CSV\n","    df.to_csv(file_path, index=False)\n","    print(f\"Данные сохранены в {file_path}\")"]},{"cell_type":"code","source":["data_test = load_data(\"/content/credit_scoring/data/raw/data_test.csv\")\n","data_train = load_data(\"/content/credit_scoring/data/raw/data_train.csv\")\n","\n","processed_test = preprocess_data(data_test)\n","processed_train = preprocess_data(data_train)\n","\n","save_data(processed_test, \"/content/credit_scoring/data/preprocessed\", \"proc_test\")\n","save_data(processed_train, \"/content/credit_scoring/data/preprocessed\", \"proc_train\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vTZCtiHECVc-","executionInfo":{"status":"ok","timestamp":1725537923133,"user_tz":-180,"elapsed":531,"user":{"displayName":"vasiliy iv","userId":"01312627105107380740"}},"outputId":"ae4c5f81-0fd6-4f54-d011-a155a7d281dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Данные сохранены в /content/credit_scoring/data/preprocessed/proc_test\n","Данные сохранены в /content/credit_scoring/data/preprocessed/proc_train\n"]}]}]}